name: Tests
on: push
jobs:
  ubuntu22-clang17-x86_64:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      env:
        SDE_LINUX: ${{ secrets.SDE_LINUX }}
        TMP_DIR: ${{ runner.temp }}
      run: |
        set -e
        sudo apt-get update && sudo apt-get install -y ninja-build
        wget -O - https://apt.llvm.org/llvm.sh | sudo bash -s - 17
        curl -o "$TMP_DIR/sde.tar.bz2" -L "$SDE_LINUX"
        mkdir "$TMP_DIR/sde-bin"
        tar -C "$TMP_DIR/sde-bin" -xjf "$TMP_DIR/sde.tar.bz2" --strip 1
        sudo ln -s $TMP_DIR/sde-bin/sde64 /usr/bin/sde
        ci/run.sh build-release -DKFR_ENABLE_CAPI_BUILD=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DKFR_ARCH_TESTS=sse2,sse3,sse41,avx,avx2,avx512 -DKFR_ARCH=avx2 -DKFR_USE_SDE=ON -DCMAKE_CXX_COMPILER=clang++-17 -DCMAKE_BUILD_TYPE=Release

  ubuntu22-clang17-arm:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: |
        set -e
        sudo apt-get update && sudo apt-get install -y ninja-build g++-arm-linux-gnueabihf qemu qemu-system-arm qemu-user
        wget -O - https://apt.llvm.org/llvm.sh | sudo bash -s - 17
        ci/run.sh build-release -DENABLE_EXAMPLES=OFF -DCLANG_SUFFIX=-17 -DCMAKE_BUILD_TYPE=Release -DGCC_VER=11 -DCMAKE_TOOLCHAIN_FILE=../cmake/arm.cmake

  ubuntu22-clang17-arm64:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: |
        set -e
        sudo apt-get update && sudo apt-get install -y ninja-build g++-aarch64-linux-gnu qemu qemu-system-arm qemu-user
        wget -O - https://apt.llvm.org/llvm.sh | sudo bash -s - 17
        ci/run.sh build-release -DENABLE_EXAMPLES=OFF -DCLANG_SUFFIX=-17 -DCMAKE_BUILD_TYPE=Release -DGCC_VER=11 -DCMAKE_TOOLCHAIN_FILE=../cmake/aarch64.cmake

  ubuntu22-gcc13-x86_64:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: |
        sudo apt-get update && sudo apt-get install -y ninja-build g++-13
        ci/run.sh build-release -DKFR_ARCH=target -DCMAKE_CXX_COMPILER=g++-13 -DCMAKE_BUILD_TYPE=Release

  windows2022-clang17-x86:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      env:
        SDE_WINDOWS: ${{ secrets.SDE_WINDOWS }}
        TMP_DIR: ${{ runner.temp }}
      run: |
        choco install llvm --version 17.0.6
        choco install ninja
        curl -o "$Env:TMP_DIR/sde.zip" -L $Env:SDE_WINDOWS
        "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$Env:TMP_DIR/sde.zip"
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
        $env:CXXFLAGS = '-m32'
        $env:Path += ';C:\sde'
        ci\run.cmd build-release -DKFR_ENABLE_CAPI_BUILD=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DKFR_ARCH_TESTS=sse2,ssse3,sse42,avx,avx2,avx512 -DKFR_ENABLE_MULTIARCH=ON -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_LINKER="C:/Program Files/LLVM/bin/lld-link.exe" -DKFR_USE_SDE=ON -DKFR_ARCH=sse2 -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR="C:/Program Files/LLVM/bin/llvm-lib.exe"

  windows2022-clang17-x86_64:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      env:
        SDE_WINDOWS: ${{ secrets.SDE_WINDOWS }}
        TMP_DIR: ${{ runner.temp }}
      run: |
        choco install llvm --version 17.0.6
        choco install ninja
        curl -o "$Env:TMP_DIR/sde.zip" -L $Env:SDE_WINDOWS
        "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$Env:TMP_DIR/sde.zip"
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        $env:Path += ';C:\sde'
        ci\run.cmd build-release -DKFR_ENABLE_CAPI_BUILD=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DKFR_ARCH_TESTS=sse2,ssse3,sse42,avx,avx2,avx512 -DKFR_ENABLE_MULTIARCH=ON -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_LINKER="C:/Program Files/LLVM/bin/lld-link.exe" -DKFR_USE_SDE=ON -DKFR_ARCH=sse2 -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR="C:/Program Files/LLVM/bin/llvm-lib.exe"

  windows2022-msvc2022-x86:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      env:
        SDE_WINDOWS: ${{ secrets.SDE_WINDOWS }}
        TMP_DIR: ${{ runner.temp }}
      run: |
        choco install ninja
        curl -o "$Env:TMP_DIR/sde.zip" -L $Env:SDE_WINDOWS
        "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$Env:TMP_DIR/sde.zip"
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
        $env:Path += ';C:\sde'
        ci\run.cmd build-release -DKFR_ARCH_TESTS=sse2,ssse3,sse42,avx,avx2,avx512 -DKFR_ENABLE_MULTIARCH=ON -DKFR_USE_SDE=ON -DKFR_ARCH=sse2 -DCMAKE_BUILD_TYPE=Release

  windows2022-msvc2022-x86_64:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      env:
        SDE_WINDOWS: ${{ secrets.SDE_WINDOWS }}
        TMP_DIR: ${{ runner.temp }}
      run: |
        choco install ninja
        curl -o "$Env:TMP_DIR/sde.zip" -L $Env:SDE_WINDOWS
        "C:\Program Files\7-Zip\7z.exe" x -oC:\sde "$Env:TMP_DIR/sde.zip"
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        $env:Path += ';C:\sde'
        ci\run.cmd build-release -DKFR_ARCH_TESTS=sse2,ssse3,sse42,avx,avx2,avx512 -DKFR_ENABLE_MULTIARCH=ON -DKFR_USE_SDE=ON -DKFR_ARCH=sse2 -DCMAKE_BUILD_TYPE=Release

  windows2022-clang17-android-arm:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: choco install llvm --version 17.0.6

  windows2022-clang17-android-arm64:
    runs-on: windows-2022
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: choco install llvm --version 17.0.6

  macos13-xcode14-x86_64:
    runs-on: macos-13
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: |
        set -e
        brew install ninja
        ci/run.sh build-release -DCMAKE_OSX_ARCHITECTURES=x86_64 -DKFR_ENABLE_CAPI_BUILD=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DKFR_ARCH_TESTS=sse42,avx -DKFR_ARCH=target -DCMAKE_BUILD_TYPE=Release      
  
  macos13-xcode14-arm64:
    runs-on: macos-13
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: |
        set -e
        brew install ninja
        ci/run.sh build-release -DCMAKE_OSX_ARCHITECTURES=arm64 -DKFR_SKIP_TESTS=ON -DKFR_ENABLE_CAPI_BUILD=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DKFR_ARCH=target -DCMAKE_BUILD_TYPE=Release      

  macos13-xcode14-ios-arm64:
    runs-on: macos-13
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Tests
      run: |
        set -e
        brew install ninja
        ci/run.sh build-release -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.cmake -DCMAKE_BUILD_TYPE=Release -DIOS_PLATFORM=OS64 -DIOS_ARCH=arm64 -DCMAKE_MAKE_PROGRAM=/usr/local/bin/ninja -DKFR_SKIP_TESTS=ON
